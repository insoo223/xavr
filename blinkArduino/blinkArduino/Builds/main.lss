
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000b4  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005f4  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dde  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001510  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 42 00 	call	0x84	; 0x84 <main>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initIO>:
#include <util/delay.h>

void initIO(void) {
    // Set Data Direction Register B w/Data Direction Bit
    //DDRB |= _BV(DDB5); // Set LED as an output
    DDRB |= (1 << DDB5); // Save effect as above
  80:	25 9a       	sbi	0x04, 5	; 4
  82:	08 95       	ret

00000084 <main>:
}

int main(void) {
	initIO();
  84:	0e 94 40 00 	call	0x80	; 0x80 <initIO>
    
	while (1) {
        // set i < 5 for blinking like every third sec
        // set i < 20 for blinking like every sec
        for(char i = 0; i < 5; i++){
  88:	80 e0       	ldi	r24, 0x00	; 0
            _delay_ms(30);  /* max is 262.14 ms / F_CPU in MHz */
        }
        //PORTB ^=(1 << PORTB5);    /* toggle the LED */
        PORTB ^= _BV(PORTB5);       // Save effect as above
  8a:	90 e2       	ldi	r25, 0x20	; 32
	initIO();
    
	while (1) {
        // set i < 5 for blinking like every third sec
        // set i < 20 for blinking like every sec
        for(char i = 0; i < 5; i++){
  8c:	85 30       	cpi	r24, 0x05	; 5
  8e:	58 f4       	brcc	.+22     	; 0xa6 <main+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	36 e7       	ldi	r19, 0x76	; 118
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x12>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x1c>
  a0:	00 00       	nop
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <main+0x8>
            _delay_ms(30);  /* max is 262.14 ms / F_CPU in MHz */
        }
        //PORTB ^=(1 << PORTB5);    /* toggle the LED */
        PORTB ^= _BV(PORTB5);       // Save effect as above
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	89 27       	eor	r24, r25
  aa:	85 b9       	out	0x05, r24	; 5
	initIO();
    
	while (1) {
        // set i < 5 for blinking like every third sec
        // set i < 20 for blinking like every sec
        for(char i = 0; i < 5; i++){
  ac:	80 e0       	ldi	r24, 0x00	; 0
            _delay_ms(30);  /* max is 262.14 ms / F_CPU in MHz */
        }
        //PORTB ^=(1 << PORTB5);    /* toggle the LED */
        PORTB ^= _BV(PORTB5);       // Save effect as above
	}
  ae:	f0 cf       	rjmp	.-32     	; 0x90 <main+0xc>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
